/*
 * Copyright 2017 Zhihu Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 27
    buildToolsVersion "26.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        consumerProguardFiles 'proguard-rules.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    variant.outputs.all {
        //outputFileName = "matisse-$library_version"+".aar"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:support-v4:${versions.supportLibrary}"
    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support:support-annotations:${versions.supportLibrary}"
    implementation "com.android.support:recyclerview-v7:${versions.supportLibrary}"
    implementation "it.sephiroth.android.library.imagezoom:library:${versions.imageZoom}"

    compileOnly "com.github.bumptech.glide:glide:${versions.glide}"
    compileOnly "com.squareup.picasso:picasso:${versions.picasso}"
}

task checkstyle(type:Checkstyle) {
    description 'Runs Checkstyle inspection against matisse sourcesets.'
    group = 'Code Quality'
    configFile rootProject.file('checkstyle.xml')
    ignoreFailures = false
    showViolations true
    classpath = files()
    source 'src/main/java'
}

// source jar (optional)
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

// javadoc jar (optional)
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Publish Artifact
publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.zhihu.android'
            artifactId 'matisse'
            version "$versions.library_version"
            artifact("$buildDir/outputs/aar/$artifactId-release.aar")
            artifact(androidSourcesJar)
            artifact(javadocJar)
        }
    }

    repositories {
        maven {
            url "$rootDir/repo"
        }
    }
}